# Generated by Django 5.2.6 on 2025-10-23 06:43

import api.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('university', models.CharField(blank=True, max_length=200)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('major', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(choices=[('student', 'Student'), ('moderator', 'Moderator'), ('admin', 'Admin')], default='student', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('profile_visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='public', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('professor', models.CharField(max_length=100)),
                ('course', models.CharField(blank=True, help_text='Course name or code', max_length=100)),
                ('semester', models.CharField(max_length=20)),
                ('year', models.IntegerField()),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Price in USD', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=False)),
                ('color', models.CharField(default='#6366F1', help_text='Hex color code for visual identification (e.g., #FF5733)', max_length=7)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_portfolios', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('professor', 'semester', 'year')},
            },
        ),
        migrations.CreateModel(
            name='ClassReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_grade', models.CharField(blank=True, max_length=2)),
                ('difficulty_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('teaching_quality_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('workload_rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True)),
                ('tips', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.classportfolio')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_id', models.CharField(help_text='Unique file identifier', max_length=100, unique=True)),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('download_url', models.URLField(help_text='S3 download URL')),
                ('bucket', models.CharField(help_text='S3 bucket name', max_length=100)),
                ('folder', models.CharField(help_text='S3 folder path', max_length=100)),
                ('learn_method', models.CharField(choices=[('summary', 'Summary'), ('extract', 'Extract'), ('analyze', 'Analyze')], default='summary', help_text='Learning method applied to the document', max_length=50)),
                ('learning_result', models.JSONField(default=dict, help_text='Results from document processing')),
                ('key_points', models.JSONField(default=list, help_text='Key points extracted from the document')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether document has been processed')),
                ('processing_error', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(blank=True, help_text='Associated portfolio (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.classportfolio')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the document', on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(help_text='Original filename of the document', max_length=255)),
                ('topic', models.CharField(help_text='Quiz topic/subject', max_length=255)),
                ('total_questions', models.IntegerField(help_text='Total number of questions in the quiz')),
                ('text_length', models.IntegerField(help_text='Length of the source text')),
                ('word_count', models.IntegerField(help_text='Word count of the source text')),
                ('quiz_data', models.JSONField(default=dict, help_text='Complete quiz data including questions and answers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='document_quizzes', to='api.document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='document_quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document Quiz',
                'verbose_name_plural': 'Document Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImportantDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('date_type', models.CharField(choices=[('exam', 'Exam'), ('quiz', 'Quiz'), ('assignment', 'Assignment'), ('project', 'Project'), ('midterm', 'Midterm'), ('final', 'Final'), ('other', 'Other')], max_length=20)),
                ('due_date', models.DateTimeField()),
                ('description', models.TextField(blank=True)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('is_synced', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='important_dates', to='api.classportfolio')),
            ],
            options={
                'ordering': ['due_date'],
            },
        ),
        migrations.CreateModel(
            name='LectureMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('material_type', models.CharField(choices=[('notes', 'Lecture Notes'), ('slides', 'PowerPoint'), ('pdf', 'PDF'), ('image', 'Image'), ('video', 'Video'), ('audio', 'Audio')], max_length=20)),
                ('file', models.FileField(upload_to='materials/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('topic', models.CharField(blank=True, max_length=100)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='api.classportfolio')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Flashcard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('front', models.TextField()),
                ('back', models.TextField()),
                ('difficulty', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flashcards', to='api.lecturematerial')),
            ],
        ),
        migrations.CreateModel(
            name='MarketplaceListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in USD', max_digits=10)),
                ('status', models.CharField(choices=[('active', 'Active'), ('sold', 'Sold'), ('paused', 'Paused'), ('removed', 'Removed')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('promo_code', models.CharField(blank=True, max_length=50, null=True)),
                ('campus_license_available', models.BooleanField(default=False)),
                ('campus_license_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('portfolio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='marketplace_listing', to='api.classportfolio')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('deadline', 'Deadline Reminder'), ('grade', 'Grade Update'), ('study', 'Study Reminder'), ('group', 'Study Group Update'), ('general', 'General')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_date', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.importantdate')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PortfolioPurchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('promo_code_used', models.CharField(blank=True, max_length=50, null=True)),
                ('purchased_at', models.DateTimeField(auto_now_add=True)),
                ('payment_method', models.CharField(default='stripe', max_length=50)),
                ('payment_id', models.CharField(blank=True, max_length=200, null=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.marketplacelisting')),
            ],
            options={
                'ordering': ['-purchased_at'],
                'unique_together': {('listing', 'buyer')},
            },
        ),
        migrations.AddField(
            model_name='marketplacelisting',
            name='buyers',
            field=models.ManyToManyField(related_name='purchased_portfolios', through='api.PortfolioPurchase', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.post')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProcessedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_file', models.FileField(upload_to='processed_files/')),
                ('file_name', models.CharField(max_length=255)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF Document'), ('docx', 'Word Document'), ('pptx', 'PowerPoint Presentation'), ('doc', 'Word Document (Legacy)'), ('ppt', 'PowerPoint (Legacy)'), ('txt', 'Text Document')], max_length=10)),
                ('file_size', models.BigIntegerField()),
                ('context', models.CharField(choices=[('lecture_notes', 'Lecture Notes'), ('syllabus', 'Syllabus'), ('assignment', 'Assignment'), ('textbook', 'Textbook Chapter'), ('presentation', 'Presentation Slides'), ('handout', 'Handout'), ('other', 'Other')], default='other', max_length=50)),
                ('extracted_text', models.TextField()),
                ('ai_summary', models.TextField(blank=True)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('processing_error', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('word_count', models.IntegerField(default=0)),
                ('char_count', models.IntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('portfolio', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processed_files', to='api.classportfolio')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processed_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professors', to='api.department')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('quiz_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('mixed', 'Mixed (Multiple Choice + True/False)')], default='mixed', max_length=20)),
                ('topic', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=False)),
                ('time_limit_minutes', models.IntegerField(blank=True, help_text='Time limit in minutes (optional)', null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='api.classportfolio')),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False')], default='multiple_choice', max_length=20)),
                ('options', models.JSONField(blank=True, default=list, help_text='List of answer options for multiple choice')),
                ('correct_option_index', models.IntegerField(blank=True, help_text='Index of correct option (0-based)', null=True)),
                ('is_true', models.BooleanField(blank=True, help_text='True if answer is True, False if answer is False', null=True)),
                ('points', models.IntegerField(default=1)),
                ('explanation', models.TextField(blank=True, help_text='Explanation for the correct answer')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('url', models.URLField()),
                ('resource_type', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('topic', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='api.classportfolio')),
                ('recommended_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('max_members', models.IntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_study_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='study_groups', to=settings.AUTH_USER_MODEL)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='api.classportfolio')),
            ],
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='syllabi/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('extracted_text', models.TextField(blank=True)),
                ('extraction_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('extraction_error', models.TextField(blank=True)),
                ('portfolio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='syllabus', to='api.classportfolio')),
            ],
        ),
        migrations.CreateModel(
            name='SyllabusExtraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_title', models.CharField(blank=True, max_length=200)),
                ('course_code', models.CharField(blank=True, max_length=20)),
                ('course_description', models.TextField(blank=True)),
                ('credits', models.IntegerField(blank=True, null=True)),
                ('prerequisites', models.TextField(blank=True)),
                ('professor_name', models.CharField(blank=True, max_length=200)),
                ('professor_email', models.EmailField(blank=True, max_length=254)),
                ('professor_office', models.CharField(blank=True, max_length=200)),
                ('professor_office_hours', models.TextField(blank=True)),
                ('professor_phone', models.CharField(blank=True, max_length=20)),
                ('class_days', models.CharField(blank=True, max_length=50)),
                ('class_time', models.CharField(blank=True, max_length=50)),
                ('class_location', models.CharField(blank=True, max_length=200)),
                ('semester', models.CharField(blank=True, max_length=50)),
                ('exam_dates', models.JSONField(blank=True, default=list)),
                ('homework_dates', models.JSONField(blank=True, default=list)),
                ('project_dates', models.JSONField(blank=True, default=list)),
                ('quiz_dates', models.JSONField(blank=True, default=list)),
                ('final_exam_date', models.DateTimeField(blank=True, null=True)),
                ('midterm_dates', models.JSONField(blank=True, default=list)),
                ('grading_scale', models.TextField(blank=True)),
                ('grade_breakdown', models.JSONField(blank=True, default=dict)),
                ('late_policy', models.TextField(blank=True)),
                ('attendance_policy', models.TextField(blank=True)),
                ('academic_integrity', models.TextField(blank=True)),
                ('disability_accommodations', models.TextField(blank=True)),
                ('course_objectives', models.TextField(blank=True)),
                ('textbook_required', models.TextField(blank=True)),
                ('textbook_recommended', models.TextField(blank=True)),
                ('course_website', models.URLField(blank=True)),
                ('additional_resources', models.TextField(blank=True)),
                ('extraction_confidence', models.FloatField(default=0.0)),
                ('extraction_method', models.CharField(default='ai_extraction', max_length=50)),
                ('extracted_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('syllabus', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='extraction', to='api.syllabus')),
            ],
        ),
        migrations.CreateModel(
            name='YouTubeVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='Learning resource URL (YouTube, Coursera, articles, etc.)', max_length=500, validators=[api.models.validate_safe_url])),
                ('title', models.CharField(blank=True, help_text='Resource title (optional)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Resource description (optional)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='youtube_videos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Link',
                'verbose_name_plural': 'Learning Links',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='api.post')),
            ],
            options={
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.CreateModel(
            name='QuizSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('time_taken_minutes', models.IntegerField(blank=True, null=True)),
                ('score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('total_points', models.IntegerField(default=0)),
                ('answers', models.JSONField(default=dict, help_text='Dictionary of question_id: user_answer')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='api.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('quiz', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CalendarEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Event description (optional)')),
                ('event_type', models.CharField(choices=[('homework', 'Homework'), ('test', 'Test'), ('exam', 'Exam'), ('quiz', 'Quiz'), ('project', 'Project'), ('presentation', 'Presentation'), ('lab', 'Lab'), ('reading', 'Reading'), ('study_session', 'Study Session'), ('office_hours', 'Office Hours'), ('review_session', 'Review Session'), ('other', 'Other')], default='other', help_text='Type of event', max_length=20)),
                ('due_date', models.DateTimeField(help_text='Due date/time for the event')),
                ('reminder_time', models.DateTimeField(blank=True, help_text='Optional: Time to send reminder', null=True)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('submitted', 'Submitted'), ('graded', 'Graded'), ('cancelled', 'Cancelled')], default='not_started', help_text='Current status', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='Priority level', max_length=10)),
                ('points', models.IntegerField(blank=True, help_text='Points/grade weight (optional)', null=True)),
                ('location', models.CharField(blank=True, help_text='Location of event (optional)', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the event was completed', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
                ('class_portfolio', models.ForeignKey(blank=True, help_text='Optional: Link to a specific class', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to='api.classportfolio')),
                ('linked_resources', models.ManyToManyField(blank=True, help_text='Learning resources linked to this event', related_name='calendar_events', to='api.youtubevideo')),
            ],
            options={
                'verbose_name': 'Calendar Event',
                'verbose_name_plural': 'Calendar Events',
                'ordering': ['due_date'],
                'indexes': [models.Index(fields=['user', 'due_date'], name='api_calenda_user_id_36bd65_idx'), models.Index(fields=['event_type', 'due_date'], name='api_calenda_event_t_fbb33e_idx')],
            },
        ),
    ]
